#include "ooo_cpu.h"
#include <bitset>

#define GLOBAL_HISTORY_LENGTH   1000
#define CLOCK_RESET_LIMIT       8192000

#define BIMODAL_SIZE            12      // 2^12 : Num entries in bimodal table
#define BIMODAL_PRIME           4093
#define TAGE_SIZE               12      // 2^12 : Num entries in tage table
#define LOOP_SIZE               10      // 2^10 : Num entries in loop table
#define LOOP_PRIME              1021

#define NUM_TAGE_TABLES         9
#define NUM_CSR_TAGS            2
#define BIMODAL_PRED_SIZE       2       // Pred variable in Bimodal table
#define TAGE_PRED_SIZE          3       // Pred variable in tage table
#define TAGE_USEFUL_SIZE        2       // Useful variable in tage table
#define TAGE_TAG_SIZE           12      // Tag variable in tage table
#define LOOP_TAG_SIZE           14      // Tag variable in loop table
#define LOOP_TAG_PRIME          16381
#define LOOP_IT_SIZE            14      // 2^14 : Num loop iteration in entry
#define LOOP_CURR_SIZE          14      // 2^14 : Num current iteration in entry
#define LOOP_AGE_SIZE           8       // 2^8 : Num age in entry
#define LOOP_CONF_SIZE          2       // Confidence variable in loop table

#define LOOP_IT_MAX             14      // 2^14 : Max iteration count
#define LOOP_IT_MIN             1       // predict only if iterCount > LOOP_IT_MIN
#define LOOP_AGE_MAX            8       // 2^8 : Highest possible age
#define LOOP_CONF_MAX           3       // b(11)
#define TAGE_USEFUL_MAX         3       // b(11)
#define BIMODAL_MAX             3       // b(11)
#define TAGE_MAX                7       // b(111)
#define BIMODAL_WEAKLY_TAKEN    2       // 2 bit
#define TAGE_WEAKLY_TAKEN       4       // 3 bit
#define TAGE_WEAKLY_NOT_TAKEN   3       // 3 bit

// TODO: Change this (length of history for indexing on tage tables)
#define TAGE_HISTORY_1          5
#define TAGE_HISTORY_2          9
#define TAGE_HISTORY_3          15
#define TAGE_HISTORY_4          26
#define TAGE_HISTORY_5          44
#define TAGE_HISTORY_6          76
#define TAGE_HISTORY_7          130
#define TAGE_HISTORY_8          254
#define TAGE_HISTORY_9          495

#define CLOCK_STATE_1           1       // reset LSB of u
#define CLOCK_STATE_2           2       // reset MSB of u

#define USE_ALT_ON_NA_MAX       15
#define USE_ALT_ON_NA_INIT      7

#define TAKEN                   1
#define NOT_TAKEN               0

typedef struct bimodalEntry {
    uint8_t pred : BIMODAL_PRED_SIZE;
} bimodal_t;

typedef struct tageEntry {
    uint8_t pred : TAGE_PRED_SIZE;
    uint8_t use : TAGE_USEFUL_SIZE;
    uint16_t tag : TAGE_TAG_SIZE;
} tage_t;

typedef struct loopEntry {
	uint16_t iterCount : LOOP_IT_SIZE;
	uint16_t currentIter : LOOP_CURR_SIZE;
	uint16_t tag : LOOP_TAG_SIZE;
	uint16_t age : LOOP_AGE_SIZE;
	uint8_t conf : LOOP_CONF_SIZE;
} loop_t;

typedef struct csr {
    uint32_t value;
    uint8_t targetLength;
} csr_t;

typedef struct prediction {
    uint8_t pred;
    uint8_t altPred;
    uint32_t index;
    uint32_t altIndex;
    uint8_t table;
    uint8_t altTable;
} prediction_t;

// Global data structures
bimodal_t    bimodalTable[NUM_CPUS][1 << (BIMODAL_SIZE)];
tage_t       tageTable[NUM_CPUS][NUM_TAGE_TABLES][1 << (TAGE_SIZE)];
loop_t       loopTable[NUM_CPUS][1 << (LOOP_SIZE)];
csr_t        csrIndex[NUM_CPUS][NUM_TAGE_TABLES];
csr_t        csrTag[NUM_CPUS][NUM_TAGE_TABLES][NUM_CSR_TAGS];
prediction_t predict[NUM_CPUS];
uint32_t     tageTag[NUM_CPUS][NUM_TAGE_TABLES];
uint32_t     tageIndex[NUM_CPUS][NUM_TAGE_TABLES];
uint32_t     global_clock;
uint8_t      clockstate;
uint8_t      altBetter;
uint16_t     path_history;

uint32_t tageHistory[NUM_TAGE_TABLES] = {
    TAGE_HISTORY_1,
    TAGE_HISTORY_2,
    TAGE_HISTORY_3,
    TAGE_HISTORY_4,
    TAGE_HISTORY_5,
    TAGE_HISTORY_6,
    TAGE_HISTORY_7,
    TAGE_HISTORY_8,
    TAGE_HISTORY_9
};

uint8_t offset[NUM_TAGE_TABLES] = { 0, 0, 0, 0, 2, 2, 2, 3, 3 };

bitset<GLOBAL_HISTORY_LENGTH> history;

uint8_t max(uint8_t a, uint8_t b) {
    return a > b ? a : b;
}

uint8_t min(uint8_t a, uint8_t b) {
    return a > b ? b : a;
}

void init_csr(uint32_t cpu, int table) {
    // initialize tage indexing csr
    csrIndex[cpu][table].value = 0;
    csrIndex[cpu][table].targetLength = TAGE_SIZE;
    
    // initialize tage tag csr0 and csr1
    for (int i = 0; i < NUM_CSR_TAGS; ++i) {
        csrTag[cpu][table][i].value = 0;
        csrTag[cpu][table][i].targetLength = TAGE_TAG_SIZE - i;
    }
}

void update_csr(uint32_t cpu, int table) {
    // update tag index
    csr_t *index = &csrIndex[cpu][table];
    index->value = ((index->value) << 1) + history[0];
    index->value ^= (((index->value) & (1 << (index->targetLength))) >> (index->targetLength));
    index->value ^= ((history[tageHistory[table]]) << ((tageHistory[table]) % (index->targetLength)));
    index->value &= ((1 << (index->targetLength)) - 1);
    
    // update tage tag csr0 and csr1
    for (int i = 0; i < NUM_CSR_TAGS; ++i) {
        csr_t *tag = &csrTag[cpu][table][i];
        tag->value = ((tag->value) << 1) + history[0];
        tag->value ^= (((tag->value) & (1 << (tag->targetLength))) >> (tag->targetLength));
        tag->value ^= ((history[tageHistory[table]]) << ((tageHistory[table]) % (tag->targetLength)));
        tag->value &= ((1 << (tag->targetLength)) - 1);
    }
}

uint32_t get_index(uint32_t cpu, uint64_t ip, int table) {
    uint32_t index = ip ^ (ip >> TAGE_SIZE) ^ (ip >> (TAGE_SIZE * 2)) ^ (ip >> (TAGE_SIZE * 3)) ^ csrIndex[cpu][table].value ^ path_history ^ (path_history & ((1<<offset[table])-1));
	return (index & ((1 << TAGE_SIZE) - 1));
}

uint32_t get_tag(uint32_t cpu, uint64_t ip, int table) {
    uint32_t tag = ip ^ csrTag[cpu][table][0].value ^ (csrTag[cpu][table][1].value << 1);
    return (tag & ((1 << TAGE_TAG_SIZE) - 1));
}

void init_new_loop(loop_t *loop, uint16_t loopTag) {
	loop->tag = loopTag;
	loop->age = (1 << LOOP_AGE_MAX) - 1;    // Prevent overflow warning
	loop->currentIter = 1;
	loop->iterCount = (1 << LOOP_IT_MAX) - 1;
	loop->conf = 0;
}

uint8_t is_strong(tage_t tage) {
    return (tage.pred != TAGE_WEAKLY_NOT_TAKEN && tage.pred != TAGE_WEAKLY_TAKEN) || tage.use > 0;
}

void O3_CPU::initialize_branch_predictor()
{
    cout << "[Group 2] CPU " << cpu << " LTAGE Branch Predictor\n";

    int bimodal_size = 1 << BIMODAL_SIZE;
    for (int i = 0; i < bimodal_size; ++i)
        bimodalTable[cpu][i].pred = BIMODAL_WEAKLY_TAKEN;
    
    memset(tageTable[cpu], 0, (1 << TAGE_SIZE) * sizeof(tage_t) * NUM_TAGE_TABLES);
    memset(loopTable[cpu], 0, (1 << LOOP_SIZE) * sizeof(loop_t));
    history.reset();
    srand(time(NULL));
    altBetter = USE_ALT_ON_NA_INIT;
    
    for (int i = 0; i < NUM_TAGE_TABLES; ++i)
        init_csr(cpu, i);
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{   
    uint16_t loopIndex = ip % LOOP_PRIME;
    uint16_t loopTag = ip % LOOP_TAG_PRIME;
    // TODO: Remove if helps in reducing memory usage 
    loop_t *loop = &loopTable[cpu][loopIndex];

    // Check for the tag-hit and conf in Loop Table
    if (loop->tag == loopTag && loop->conf == LOOP_CONF_MAX && loop->iterCount > LOOP_IT_MIN) {
        return (loop->currentIter < loop->iterCount) ? TAKEN : NOT_TAKEN;
    }
    
    uint32_t bimodalIndex = ip % BIMODAL_PRIME;

    for (int i = 0; i < NUM_TAGE_TABLES; ++i) {
        tageIndex[cpu][i] = get_index(cpu, ip, i);
        tageTag[cpu][i] = get_tag(cpu, ip, i);
    }

    predict[cpu].table = NUM_TAGE_TABLES;       // Init value = 4
    predict[cpu].altTable = NUM_TAGE_TABLES;    // Init value = 4
    
    // Check for tag hits (this will be the provider component)
    for (int i = NUM_TAGE_TABLES - 1; i >= 0; --i) {
        if (tageTable[cpu][i][tageIndex[cpu][i]].tag == tageTag[cpu][i]) {
            predict[cpu].table = i;
            predict[cpu].index = tageIndex[cpu][i];
            break;
        }
    }

    // Now, check for alternate prediction component
    for (int i = predict[cpu].table - 1; i >= 0; --i) {
        if (tageTable[cpu][i][tageIndex[cpu][i]].tag == tageTag[cpu][i]) {
            predict[cpu].altTable = i;
            predict[cpu].altIndex = tageIndex[cpu][i];
            break;
        }  
    }
    
    // If alternate prediction was not obtained, set altPred to Bimodal
    if (predict[cpu].altTable == NUM_TAGE_TABLES) {
        predict[cpu].altPred = (bimodalTable[cpu][bimodalIndex].pred >=
            BIMODAL_WEAKLY_TAKEN) ? TAKEN : NOT_TAKEN;
    } else {
        predict[cpu].altPred = (tageTable[cpu][predict[cpu].altTable]
            [predict[cpu].altIndex].pred >= TAGE_WEAKLY_TAKEN) ?
            TAKEN : NOT_TAKEN;
    }

    // If predictor component could not be found, set Pred to Bimodal
    if (predict[cpu].table == NUM_TAGE_TABLES) {
        predict[cpu].pred = predict[cpu].altPred;
    } else {
        predict[cpu].pred = (tageTable[cpu][predict[cpu].table]
            [predict[cpu].index].pred >= TAGE_WEAKLY_TAKEN) ? TAKEN : NOT_TAKEN;
    }

    if (predict[cpu].table != NUM_TAGE_TABLES && !is_strong(tageTable[cpu][predict[cpu].table][predict[cpu].index]) 
            && altBetter >= USE_ALT_ON_NA_INIT) {
        return predict[cpu].altPred;
    }

    return predict[cpu].pred;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint16_t loopIndex = ip % LOOP_PRIME;
    uint16_t loopTag = ip % LOOP_TAG_PRIME;
    // TODO: Remove if helps in reducing memory usage 
    loop_t *loop = &loopTable[cpu][loopIndex];

    if (loop->tag != loopTag && loop->age > 0) // there is a tag miss
        --(loop->age); // decrease age
    else { // there is a tag hit
        uint8_t loopConf = loop->conf;
        uint16_t _loopTag = loop->tag;
        if (loop->age == 0) { // new entry OR replace an old entry
            init_new_loop(loop, loopTag);
        } else if ((loop->currentIter < loop->iterCount) == taken) { // Our prediction was correct
            if (loop->conf == LOOP_CONF_MAX && loop->age < ((1 << LOOP_AGE_MAX) - 1))
                ++(loop->age); // increase age as prediction is correct and loop table is used
            if (loop->currentIter == loop->iterCount) {
                loop->currentIter = 0;
                loop->conf = min(loop->conf + 1, LOOP_CONF_MAX);
            } else 
                ++(loop->currentIter);
        } else { // Our prediction was incorrect
            if (loop->age == (1 << LOOP_AGE_MAX) - 1) { // newly added entry
                loop->iterCount = loop->currentIter;
                loop->currentIter = 0;
                loop->conf = 0;
            } else // not a loop
                memset(loop, 0, sizeof(loop_t));
        }

        // loop is used no need to update the other tables
        if (loop->iterCount > LOOP_IT_MIN && _loopTag == loopTag && loopConf == LOOP_CONF_MAX) return;
    }

    // Not a good idea to consume stack memory
    uint32_t predtable = predict[cpu].table;
    uint32_t predindex = predict[cpu].index;
    uint32_t bimodalIndex = ip % BIMODAL_PRIME;

    // Update global history
    history <<= 1;
    if (taken) history.set(0, 1); 

    // Update "u" bit in provider tagetable if altPred is different from pred
    if (predtable != NUM_TAGE_TABLES &&
        (predict[cpu].pred != predict[cpu].altPred)) {
        if (predict[cpu].pred == taken)
            tageTable[cpu][predtable][predindex].use = min(tageTable[cpu][predtable][predindex].use + 1, TAGE_USEFUL_MAX);
        else
            tageTable[cpu][predtable][predindex].use = max(tageTable[cpu][predtable][predindex].use - 1, 0);
    }

    // Update "altBetter" if alt predicts correct and provider component is incorrect
    if (predtable != NUM_TAGE_TABLES && !is_strong(tageTable[cpu][predtable][predindex]) && 
        predict[cpu].pred != predict[cpu].altPred) {
            if (predict[cpu].altPred == taken) {
                altBetter = min(altBetter + 1, USE_ALT_ON_NA_MAX);
            }
            else {
                altBetter = max(altBetter - 1, 0);
            }
    }

    // Updates on a correct branch prediction
    // TODO: Optimizations for newly allocated entries
    // STEP 1: Update the "pred" value in provider component
    if (predtable != NUM_TAGE_TABLES) {
        // One of the tage table was the provider component
        if (taken)
            tageTable[cpu][predtable][predindex].pred = min(tageTable[cpu][predtable][predindex].pred + 1, TAGE_MAX);
        else 
            tageTable[cpu][predtable][predindex].pred = max(tageTable[cpu][predtable][predindex].pred - 1, 0);
    } else {
        // Bimodal table was the provider component, update pred value
        if (taken)
            bimodalTable[cpu][bimodalIndex].pred = min(BIMODAL_MAX, bimodalTable[cpu][bimodalIndex].pred + 1);
        else
            bimodalTable[cpu][bimodalIndex].pred = max(0, bimodalTable[cpu][bimodalIndex].pred - 1);
    }
    
    // Check if the provider table is the longest history table. If not,
    // then an entry can be allocated
    if (predict[cpu].pred != taken && predtable != NUM_TAGE_TABLES - 1) {    // Our prediction was incorrect
        // STEP 2: Check arrangements for entry allocation
        if (predtable == NUM_TAGE_TABLES) predtable = -1;
        
        // Keep track of entries with u = 0.
        // Use probabilistic methods to avoid ping-pong of entry
        // allocation and eviction.
        uint8_t uflag = NUM_TAGE_TABLES;
        for (int i = predtable+1; i < NUM_TAGE_TABLES; ++i) {
            if (tageTable[cpu][i][tageIndex[cpu][i]].use == 0) {
                uflag = i;
                if (rand() % NUM_TAGE_TABLES <= NUM_TAGE_TABLES/2) break;
            }
        }
        // If no useful bit was zero then decrement them all by 1.
        // Else allocate a new entry for the same.
        if (uflag != NUM_TAGE_TABLES) {
            tageTable[cpu][uflag][tageIndex[cpu][uflag]].tag = tageTag[cpu][uflag];
            tageTable[cpu][uflag][tageIndex[cpu][uflag]].use = 0;
            tageTable[cpu][uflag][tageIndex[cpu][uflag]].pred = taken ? TAGE_WEAKLY_TAKEN : TAGE_WEAKLY_NOT_TAKEN;
        } else {
            for (int i = predtable+1; i < NUM_TAGE_TABLES; ++i)
                tageTable[cpu][i][tageIndex[cpu][i]].use = max(tageTable[cpu][i][tageIndex[cpu][i]].use - 1, 0);
        }
    }
    
    // Global clock handling: Check if it is time to flip bits of "u"
    if ((++global_clock) == CLOCK_RESET_LIMIT) {
        clockstate = (clockstate == CLOCK_STATE_1) ? CLOCK_STATE_2 : CLOCK_STATE_1;
        global_clock = 0;

        // Reset either MSB or LSB of u for depending on CLOCK_STATE
        for (int i = 0; i < NUM_TAGE_TABLES; ++i) {
            for (int j = 0; j < (1 << TAGE_SIZE); ++j)
                tageTable[cpu][i][j].use &= clockstate;
        }
    }

    // Update CSR (folding)
    for (int i = 0; i < NUM_TAGE_TABLES; ++i)
        update_csr(cpu, i);
    
    // Update path history 16-bit
    path_history = ((path_history << 1) + (ip & 1)) & ((1<<16)-1);
}
